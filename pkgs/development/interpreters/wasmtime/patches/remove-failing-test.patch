diff --git a/tests/all/traps.rs b/tests/all/traps.rs
index 998d11f9084..ced7219a34d 100644
--- a/tests/all/traps.rs
+++ b/tests/all/traps.rs
@@ -471,6 +471,7 @@ fn heap_out_of_bounds_trap() {
     );
 }

+#[allow(dead_code)]
 fn rustc(src: &str) -> Vec<u8> {
     let td = tempfile::TempDir::new().unwrap();
     let output = td.path().join("foo.wasm");
@@ -495,51 +496,6 @@ fn rustc(src: &str) -> Vec<u8> {
     );
 }

-#[test]
-#[cfg_attr(all(target_os = "macos", target_arch = "aarch64"), ignore)] // TODO #2808 system libunwind is broken on aarch64
-fn parse_dwarf_info() -> Result<()> {
-    let wasm = rustc(
-        "
-            fn main() {
-                panic!();
-            }
-        ",
-    );
-    let mut config = Config::new();
-    config.wasm_backtrace_details(WasmBacktraceDetails::Enable);
-    let engine = Engine::new(&config)?;
-    let module = Module::new(&engine, &wasm)?;
-    let mut linker = Linker::new(&engine);
-    wasmtime_wasi::add_to_linker(&mut linker, |s| s)?;
-    let mut store = Store::new(
-        &engine,
-        wasmtime_wasi::sync::WasiCtxBuilder::new()
-            .inherit_stdio()
-            .build(),
-    );
-    linker.module(&mut store, "", &module)?;
-    let run = linker.get_default(&mut store, "")?;
-    let trap = run
-        .call(&mut store, &[], &mut [])
-        .unwrap_err()
-        .downcast::<Trap>()?;
-
-    let mut found = false;
-    for frame in trap.trace() {
-        for symbol in frame.symbols() {
-            if let Some(file) = symbol.file() {
-                if file.ends_with("input.rs") {
-                    found = true;
-                    assert!(symbol.name().unwrap().contains("main"));
-                    assert_eq!(symbol.line(), Some(3));
-                }
-            }
-        }
-    }
-    assert!(found);
-    Ok(())
-}
-
 #[test]
 #[cfg_attr(all(target_os = "macos", target_arch = "aarch64"), ignore)] // TODO #2808 system libunwind is broken on aarch64
 fn no_hint_even_with_dwarf_info() -> Result<()> {
